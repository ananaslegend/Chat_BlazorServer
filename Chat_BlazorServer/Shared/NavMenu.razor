@using Blazored.LocalStorage
@using Chat_BlazorServer.Helpers.Abstractions
@using System.Net.Http.Headers
@inject IHttpClientFactory _httpClientFactory
@inject IAuthHelper authHelper
@inject ILocalStorageService LocalStorage

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chat_BlazorServer</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">

        @if (authorizeStatus == "Loading")
        {
            <div class="nav-item px-3">
                <span class="oi oi-loop-circular text-white"></span>
            </div>

            AuthCheck();
        }

        @if (authorizeStatus == "Authorized")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login" @onclick="LogOut">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                </NavLink>
            </div>
            AuthCheck();
        }
        @if (authorizeStatus == "NotAuthorized")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Log in
                </NavLink>

                <NavLink class="nav-link" href="registration">
                    <span class="oi oi-pencil" aria-hidden="true"></span> Registration
                </NavLink>
            </div>
            AuthCheck();
        }

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string authorizeStatus = "Loading";

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private async Task AuthCheck()
    {
        var client = _httpClientFactory.CreateClient("BaseClient");

        var token = await authHelper.GetToken();

        client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await client.GetAsync("Test/");

        authorizeStatus = (int)response.StatusCode == 200 ? "Authorized" : "NotAuthorized";

        StateHasChanged();
    }

    private async void LogOut()
    {
        await LocalStorage.RemoveItemAsync("authToken");
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
