@using Blazored.LocalStorage
@using Chat_BlazorServer.Helpers.Abstractions
@using System.Net.Http.Headers
@using System.Text
@using Newtonsoft.Json.Linq
@inject IHttpClientFactory _httpClientFactory
@inject IAuthHelper authHelper
@inject ILocalStorageService LocalStorage

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chat_BlazorServer</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">

        @if (authorizeStatus == "NotSet")
        {
            <div class="nav-item px-3">
                <span class="oi oi-loop-circular text-white"></span>
            </div>
        }

        @if (authorizeStatus == "Authorized")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login" @onclick="LogOut">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                </NavLink>
            </div>
        }
        @if (authorizeStatus == "NotAuthorized")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Log in
                </NavLink>

                <NavLink class="nav-link" href="registration">
                    <span class="oi oi-pencil" aria-hidden="true"></span> Registration
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string authorizeStatus = "NotSet";

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(authorizeStatus == "NotSet")
        {
            var token = await authHelper.GetToken();

            if(token == null)
            {
                authorizeStatus = "NotAuthorized";
                StateHasChanged();
                return;
            }

            string[] tokenParts = token.Split('.');

            string encodePayload = tokenParts[1];

            var blob = Convert.FromBase64String(encodePayload+'=');

            var payload = Encoding.UTF8.GetString(blob);

            var jsonExp = JObject.Parse(payload)["exp"];

            var exp = jsonExp.ToObject<double>();

            System.DateTime expDateTime = new DateTime(1970,1,1,0,0,0,0,System.DateTimeKind.Utc); //exp is unix time srconds 
            expDateTime = expDateTime.AddSeconds(exp).ToLocalTime();

            if (expDateTime > DateTime.Now)
            {
                authorizeStatus = "Authorized";
            }
            else
            {
                await LocalStorage.RemoveItemAsync("authToken");
            }

            StateHasChanged();
        }
    }

    private async void LogOut()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        authorizeStatus = "NotSet";
        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
