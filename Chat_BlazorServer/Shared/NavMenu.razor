@inject IHttpClientFactory _httpClientFactory
@inject ITokenHelper tokenHelper
@inject ILocalStorageService localStorage

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chat_BlazorServer</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">

        @if (authorizeStatus == "Unknown")
        {
            
        }
        @if (authorizeStatus == "Authed")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login" @onclick="LogOut">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="createchat">
                   <span class="oi oi-plus" aria-hidden="true"></span> Create new chat
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="search">
                   <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search chat
                </NavLink>
            </div>
            
        }
        @if (authorizeStatus == "NotAuthed")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Log in
                </NavLink>

                <NavLink class="nav-link" href="registration">
                    <span class="oi oi-pencil" aria-hidden="true"></span> Registration
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string authorizeStatus = "Unknown";

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var token = await tokenHelper.GetTokenAsync();

        if (token == null)
        {
            authorizeStatus = "NotAuthed"; 
            StateHasChanged();
        }
        else
        {
            authorizeStatus = "Authed";
            StateHasChanged();
        }
    }

    private async void LogOut()
    {
        //todo auth manager
        await tokenHelper.RemoveTokenAsync();
        await localStorage.RemoveItemAsync("UserName");
        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
