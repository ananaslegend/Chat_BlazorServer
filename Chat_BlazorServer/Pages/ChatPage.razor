@page "/chat/{chatId:int}"
@inherits BaseAuth

@using Microsoft.AspNetCore.SignalR.Client;
@using Chat_BlazorServer.Domain.Models

@inject ChatClient chatClient
@inject NavigationManager NavManager
@inject ILocalStorageService localStorage

@if (status == AuthStatus.NotSet)
{
    <LoadingComponent />
}
else
{
    <h3></h3>

    <div class="col">
        <div style="width:100%; height:500px; overflow:auto;">
            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Sender</th>
                        <th scope="col">Message</th>
                        <th scope="col">Time</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var message in messages)
                    {
                        <tr>
                            <td>@message.Author</td>
                            <td>@message.Data</td>
                            <td>@message.Date</td>
                            
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="inut-group">
            <EditForm Model="createMessage" OnValidSubmit="AddMessage" style="max-width:500px;">
                <ValidationSummary />
                <div>
                    <InputText class="form-control" @bind-Value="msg"></InputText>
                    <button class="btn btn-primary" type="submit">Send</button>
                </div>                
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int chatId { get; set; }
    AuthStatus status = AuthStatus.NotSet;
    List<Message> messages = new();
    private HubConnection? hubConnection;
    int batch = 20;
    int loaded = 0;
    CreateMessage createMessage = new();
    string msg = null;
    string userName;

    private async Task AddMessage()
    {
        createMessage = new()
            {
                ChatId = Convert.ToInt32(chatId),
                MessageText = msg,
                SenderName = userName
            };

        await hubConnection.SendAsync("AddMessage", createMessage);
    }

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<IList<Message>>("AddMessagePack", (pack =>
             {
                 messages.InsertRange(0, pack);
                 loaded += batch;
                 StateHasChanged();
             }));
        hubConnection.On<Message>("AddMessage", (msg) => 
            {
                messages.Add(msg);
                loaded += 1;

                StateHasChanged();
            });

        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await chatClient.GetAuthAsync("Test/");

            UserAccessCheck(response, async () =>
            {
                //if (hubConnection != null)
                //{
                //    await hubConnection.InvokeAsync("LeaveRoom", chatId);
                //}
                await Connect();

                await hubConnection.SendAsync("JoinRoom", chatId);

                await hubConnection.SendAsync("GetMassagePack", chatId, loaded, batch);

                var user = await localStorage.GetItemAsStringAsync("UserName");
                user = user.Trim('"');
                userName = user;

                status = AuthStatus.Authed;
                StateHasChanged();
            });
        }
    }
}
