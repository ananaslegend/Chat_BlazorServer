@page "/chat/{chatId:int}"
@inherits BaseAuth

@using Chat_BlazorServer.Domain.Models
@using Microsoft.AspNetCore.SignalR.Client

@inject ChatClient chatClient
@inject NavigationManager NavManager
@inject ILocalStorageService localStorage

@if (status == AuthStatus.NotSet)
{
    <LoadingComponent />
}
else
{
    <div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height: 750px;">
        @if(!messages.Any())
        {
            <p>No messages yet</p>
        }
        <button class="btn btn-outline-primary mb-3" @onclick="GetOlderMessages">
            <span class="oi oi-clock"></span>
        </button>
        @foreach (var item in messages)
        {
            <div class="mb-3 d-flex">
                <div class="card shadow" style="width: 18rem;">
                    <div class="card-header">
                        @item.AuthorName
                        @if(item.ReplyAuthorName != null)
                        {
                            <p>Replyed to @item.ReplyAuthorName</p>
                        }
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">@item.Data</li>
                    </ul>
                    <div class="card-footer">
                        <span class="small">@item.Date.ToString("HH:mm | MMM dd")</span>
                        @if(item.AuthorName == userName)
                        {
                            <button class="btn" @onclick="() => ChangeMessageModeToUpdate(item)">
                                <span class="oi oi-pencil small "></span>
                            </button>
                        }
                        <button class="btn" @onclick="() => Delete(item)">
                            <span class="oi oi-trash small"></span>
                        </button>
                        <button class="btn " @onclick="() => ChangeMessageModeToReply(item)">
                            <span class="oi oi-share small "></span>
                        </button>
                    </div>
                </div> 
            </div>
        }
    </div>
    <div class="container">
        <div class="row">
            <div class="col-9">
                <textarea @bind="msgInput" class="form-control" placeholder="Ur msg..."></textarea>
            </div>
            <div class="col-3">
                @if(messageMode == "update")
                {
                    <button class="btn btn-primary" type="button" @onclick="Update">Update</button>
                }
                @if(messageMode == "reply")
                {
                    <button class="btn btn-primary" type="button" @onclick="Reply">Reply</button>
                }
                @if(messageMode == "send")
                {
                    <button class="btn btn-primary" type="button" @onclick="Send">Send</button>
                }
            </div>
        </div>
    </div>
}

@code {
    AuthStatus status = AuthStatus.NotSet;

    [Parameter]
    public int chatId { get; set; }
    List<MessageItem> messages = new();
    MessageItem? replyingMessage = null;
    MessageItem? updatingingMessage = null;
    private HubConnection? hubConnection;
    string messageMode = "send";

    int batch = 20;
    int loaded = 0;
    string msgInput = String.Empty;
    string userName = String.Empty;

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    private void ChangeMessageModeToReply(MessageItem message)
    {
        replyingMessage = message;
        messageMode = "reply";
        StateHasChanged();
    }
    private void ChangeMessageModeToUpdate(MessageItem message)
    {
        messageMode = "update";
        updatingingMessage = message;
        msgInput = message.Data;
        StateHasChanged();
    }
    private async Task Update()
    {
        if(updatingingMessage != null && !string.IsNullOrEmpty(msgInput))
        {
            updatingingMessage.Data = msgInput;
            await hubConnection.InvokeAsync("UpdateMessage", updatingingMessage);

            msgInput = String.Empty;
            messageMode = "send";
            updatingingMessage = null;
        }
    }
    private async Task Reply()
    {
        if(!string.IsNullOrEmpty(msgInput))
        {
            CreateMessage createMessage = new()
            {
                ChatId = Convert.ToInt32(chatId),
                MessageText = msgInput,
                SenderName = userName,
                ReplyId = replyingMessage.Id  
            };

            await hubConnection.InvokeAsync("SendMessage", createMessage);

            msgInput = String.Empty;
        }
        messageMode = "send";
        replyingMessage = null;
    }
    private async Task Delete(MessageItem message)
    {
        if(message != null)
        {
            await hubConnection.InvokeAsync("RemoveMessage", message);
        }
    }
    private async Task Send()
    {

        if(!string.IsNullOrEmpty(msgInput))
        {
            CreateMessage createMessage = new()
            {
                ChatId = Convert.ToInt32(chatId),
                MessageText = msgInput,
                SenderName = userName
            };

            await hubConnection.InvokeAsync("SendMessage", createMessage);

            msgInput = String.Empty;
        }
    }
    private async Task GetOlderMessages()
    {
        await hubConnection.InvokeAsync("GetMassagePack", chatId, messages.Count, batch);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await chatClient.GetAuthAsync("Test/");

            UserAccessCheck(response, async () =>
            {       
                var user = await localStorage.GetItemAsStringAsync("UserName");
                user = user.Trim('"');
                userName = user;
                status = AuthStatus.Authed;

                hubConnection = new HubConnectionBuilder()
                                    .WithUrl("https://localhost:44300/chathub")
                                    .Build();

                hubConnection.On<IList<MessageItem>>("AddMessagePack", (pack =>
                {
                    if (pack is not null)
                    {
                        messages.InsertRange(0, pack);
                        loaded += batch;
                    }
                }));

                hubConnection.On<MessageItem>("AddMessage", (newMessage =>
                {
                    messages.Add(newMessage);
                    loaded += 1;
                    StateHasChanged();
                }));

                hubConnection.On<int>("ReceiveDeleteMessage", (chatId) =>
                {
                    messages.Remove(messages.Single(m => m.Id == chatId));
                    StateHasChanged();
                });

                hubConnection.On<MessageItem>("ReceiveUpdateMessage", (updateMessage) =>
                {
                    var indexMessage = messages.FindIndex(m => m.Id == updateMessage.Id);
                    messages[indexMessage] = updateMessage;

                    StateHasChanged();
                });
                

                await hubConnection.StartAsync();
                await hubConnection.InvokeAsync("JoinRoom", chatId);
                await hubConnection.InvokeAsync("GetMassagePack", chatId, loaded, batch);
                StateHasChanged();
            }); 
            
        }
    }
}
