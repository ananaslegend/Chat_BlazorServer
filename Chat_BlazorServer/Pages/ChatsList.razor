@page "/chats"
@inherits BaseAuth

@inject NavigationManager NavManager
@inject ILocalStorageService localStorage
@inject ChatClient chatClient
@inject ITokenHelper tokenHelper

@if (status == AuthStatus.NotSet)
{
    <LoadingComponent />
}

@if (chats.Any())
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Chat Name</th>
                <th>Type</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var chat in chats)
            {
                <tr>
                    <td>@chat.Name</td>
                    <td>@chat.Type</td>
                    <td><button class="btn btn-primary" @onclick = "() => EnterChat(chat.Id)">Enter</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    AuthStatus status = AuthStatus.NotSet;
    List<ChatDisplayModel> chats = new();
    NameModel userName = new();

    private void EnterChat(int chatId)
    {
        NavManager.NavigateTo($"/chat/{chatId}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var user = await localStorage.GetItemAsStringAsync("UserName");
                userName.Title = user.Trim('"');
            }
            catch(Exception)
            {
                await tokenHelper.RemoveTokenAsync();
                NavManager.NavigateTo("login");
            }

            var responseWithChats = await chatClient.GetResponseAllUserChatsAsync(userName);

            UserAccessCheck(responseWithChats, () =>
            {
                chats = responseWithChats.Content.ReadFromJsonAsync<List<ChatDisplayModel>>().Result;
                status = AuthStatus.Authed;
                StateHasChanged();
            });
        }
    }
}
